#!/usr/bin/env bash

magenta="\033[1;35m"
green="\033[1;32m"
white="\033[1;37m"
blue="\033[1;34m"
red="\033[1;31m"
black="\033[1;40;30m"
yellow="\033[1;33m"
cyan="\033[1;36m"
reset="\033[0m"
bgyellow="\033[1;43;33m"
bgwhite="\033[1;47;37m"
c0=${reset}
c1=${magenta}
c2=${green}
c3=${white}
c4=${blue}
c5=${red}
c6=${yellow}
c7=${cyan}
c8=${black}
c9=${bgyellow}
c10=${bgwhite}

kernel=$(uname -o)

get_init() {
	if pidof -q systemd; then
		echo 'systemd'
	elif [ -f '/sbin/openrc' ]; then
		echo 'openrc'
	elif [ -f '/sbin/dinit' ]; then
		echo 'dinit'
	else
		cut -d ' ' -f 1 /proc/1/comm
	fi
}

get_pkg_count() {
	package_managers=('xbps-install' 'apk' 'port' 'apt' 'pacman' 'nix' 'dnf' 'rpm' 'emerge' 'eopkg')
	for package_manager in "${package_managers[@]}"; do
		if command -v "$package_manager" 2>/dev/null >&2; then
			case "$package_manager" in
			xbps-install) xbps-query -l | wc -l ;;
			apk) apk search | wc -l ;;
			apt) if [ "$kernel" != "Darwin" ]; then 
					echo $(($(apt list --installed 2>/dev/null | wc -l) - 1))
				 else
					echo 0
				 fi
				 ;;
			pacman) pacman -Q | wc -l ;;
			nix) nix-env -qa --installed '*' | wc -l ;;
			dnf) dnf list installed | wc -l ;;
			rpm) rpm -qa | wc -l ;;
			emerge) qlist -I | wc -l ;;
			port) port installed 2>/dev/null | wc -l | awk 'NR==1{print $1}' ;;
			eopkg) eopkg li | wc -l ;;
			esac
			return
		fi
	done
	echo 0
}

get_snap_count() {
	if command -v snap 2>/dev/null >&2; then
		count=$(snap list | wc -l)
		echo $((count - 1))
		return
	fi
	echo 0
}

get_flatpak_count() {
	if command -v flatpak 2>/dev/null >&2; then
		flatpak list | wc -l
		return
	fi
	echo 0
}

get_brew_count() {
	if command -v brew 2>/dev/null >&2; then
		brew list | wc -l | awk 'NR==1{print $1}'
		return
	fi
	echo 0
}

get_package_info() {
	pkg_count=$(get_pkg_count)
	snap_count=$(get_snap_count)
	flatpak_count=$(get_flatpak_count)
	brew_count=$(get_brew_count)
	if [ "$pkg_count" -ne 0 ]; then
		echo -n "$pkg_count"
		if [ "$snap_count" -ne 0 ]; then
			echo -n " ($snap_count snaps"
			if [ "$flatpak_count" -ne 0 ]; then
				echo ", $flatpak_count flatpaks)"
			else
				echo ")"
			fi
		elif [ "$flatpak_count" -ne 0 ]; then
			echo " ($flatpak_count flatpaks)"
		elif [ "$brew_count" -ne 0 ]; then
			cask_count=$(brew list --casks | wc -l | awk 'NR==1{print $1}')
			formula_count=$(brew list --formula | wc -l | awk 'NR==1{print $1}')
			echo ", $brew_count brews ($formula_count formulas & $cask_count casks)"
		else
			echo ""
		fi
	elif [ "$snap_count" -ne 0 ]; then
		echo -n "$snap_count snaps"

		if [ "$flatpak_count" -ne 0 ]; then
			echo ", $flatpak_count flatpaks"
		else
			echo ""
		fi
	elif [ "$flatpak_count" -ne 0 ]; then
		echo "$flatpak_count flatpaks"
	elif [ "$brew_count" -ne 0 ]; then
		cask_count=$(brew list --casks | wc -l | awk 'NR==1{print $1}')
		formula_count=$(brew list --formula | wc -l | awk 'NR==1{print $1}')
		echo "$brew_count brews ($formula_count formulas & $cask_count casks)"
	else
		echo "Unknown"
	fi
}

get_distro_name() {
		awk -F '=' '/PRETTY_NAME/ { print $2 }' /etc/os-release
}

get_cpu(){
cpu_all="$(cat /proc/cpuinfo | grep 'model name' | cut -d ':' -f2 | cut -b 2-)"
cpu_All="$(sed 's/ /;/g' <<< $cpu_all)"
cpu_name=""

for n in $cpu_All; do
    if test -z "$cpu_name"; then
      cpu_name=$(echo $n | sed 's/;/ /g' | sed 's/Intel//g' | sed 's/(R)//g' | sed 's/(TM)//g' | sed 's/Core//g' | sed 's/CPU//g' | sed 's/       //g' | sed 's/Gen//g')
    fi
    i=$((i + 1))
done
}
get_cpu

get_gpu() {
gpu_name="$(lspci | grep -i  'vga\|3d\|2d')"
gpu_id="$(echo $gpu_name | cut -d ' ' -f1)"
gpu_name="$(echo $gpu_name | sed s/$gpu_id//g | cut -d ':' -f2 | cut -b 2- | cut -d '(' -f 1)"
gpu_name="$(echo $gpu_name | sed s/Intel//g | sed s/Corporation//g | sed s/Integrated//g | sed s/Graphics//g | sed s/Controller//g)"
}
get_gpu

get_mem() {
	free --mega | awk 'NR == 2 { print $3" / "$2" MB" }'
}

get_uptime() {
	uptime -p | sed 's/up//'
}

get_de_wm() {
	wm="${XDG_CURRENT_DESKTOP#*:}"
	[ "$wm" ] || wm="$DESKTOP_SESSION"

	# for most WMs
	[ ! "$wm" ] && [ "$DISPLAY" ] && command -v xprop >/dev/null && {
		id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK 2>/dev/null)
		id=${id##* }
		wm=$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t 2>/dev/null | grep '^_NET_WM_NAME' | cut -d\" -f 2)
	}

	# for non-EWMH WMs
	[ ! "$wm" ] || [ "$wm" = "LG3D" ] && {
		wms=('sway' 'kiwmi' 'wayfire' 'sowm' 'catwm' 'fvwm' 'dwm' '2bwm' 'monsterwm' 'tinywm' 'xmonad')
		for current_wm in "${wms[@]}"; do
			if pgrep -x "$current_wm" 2>/dev/null >&2; then
				wm="${current_wm}";
				break
			fi
		done
	}

	echo "${wm:-unknown}"
}

echo -e "${c1}󰌽 os${c3} • $(get_distro_name) $(uname -m)"
echo -e "${c2}󰌢 kernel${c3} • $(uname -r)"
echo -e "${c7}󰏓 pkgs${c3} • $(get_package_info)"
echo -e "${c4} shell${c3} • ${SHELL##*/}"
echo -e " cpu • $cpu_name"
echo -e " gpu • $gpu_name"
echo -e "${c6}󰍛 ram${c3} • $(get_mem)"
if [ -n "$DISPLAY" ]; then
	echo -e "${c2}󰇄 de/wm${c3} • $(get_de_wm)"
fi
echo -e "${c6}󰥔 up${c3} • $(get_uptime)"
echo -e "               \033[0m"
